{
  "level": 2,
  "description": "Level 2: 2 operations, 2-3 premises",
  "problems": [
    {
      "premises": [
        "P → Q",
        "Q → R",
        "P"
      ],
      "conclusion": "R",
      "expected_operations": 2,
      "description": "Hypothetical Syllogism + MP",
      "solution": "Apply Hypothetical Syllogism to get \"P → R\" from the first two premises, then Modus Ponens with \"P\" to get \"R\"."
    },
    {
      "premises": [
        "P ∧ Q",
        "R"
      ],
      "conclusion": "(P ∧ R)",
      "expected_operations": 2,
      "description": "Simplification + Conjunction",
      "solution": "Apply Simplification to extract \"P\" from \"P ∧ Q\", then Conjunction to combine \"P\" and \"R\"."
    },
    {
      "premises": [
        "¬¬P",
        "P → Q"
      ],
      "conclusion": "Q",
      "expected_operations": 2,
      "description": "Double Negation + Modus Ponens",
      "solution": "Apply Double Negation to get \"P\" from \"¬¬P\", then Modus Ponens with \"P → Q\" to get \"Q\"."
    },
    {
      "premises": [
        "P ∨ Q",
        "¬P",
        "Q → R"
      ],
      "conclusion": "R",
      "expected_operations": 2,
      "description": "Disjunctive Syllogism + MP",
      "solution": "Apply Disjunctive Syllogism to get \"Q\" from \"P ∨ Q\" and \"¬P\", then Modus Ponens with \"Q → R\" to get \"R\"."
    },
    {
      "premises": [
        "P ∧ (Q ∧ R)"
      ],
      "conclusion": "(Q ∧ R)",
      "expected_operations": 1,
      "description": "Simplification (right)",
      "solution": "Apply Simplification to extract the right conjunct \"(Q ∧ R)\" from \"P ∧ (Q ∧ R)\"."
    },
    {
      "premises": [
        "¬(P ∨ Q)",
        "R → S"
      ],
      "conclusion": "(¬P ∧ ¬Q)",
      "expected_operations": 1,
      "description": "De Morgan's Law with unused premise",
      "solution": "Apply De Morgan's Law to \"¬(P ∨ Q)\" to get \"(¬P ∧ ¬Q)\". The premise \"R → S\" is not needed."
    },
    {
      "premises": [
        "P",
        "Q",
        "R"
      ],
      "conclusion": "(P ∧ Q) ∧ R",
      "expected_operations": 2,
      "description": "Conjunction + Conjunction",
      "solution": "Apply Conjunction to combine \"P\" and \"Q\" into \"P ∧ Q\", then apply Conjunction again with \"R\"."
    },
    {
      "premises": [
        "P → (Q ∧ R)",
        "P"
      ],
      "conclusion": "Q",
      "expected_operations": 2,
      "description": "Modus Ponens + Simplification",
      "solution": "Apply Modus Ponens to get \"Q ∧ R\", then Simplification to extract \"Q\"."
    },
    {
      "premises": [
        "(P ∧ Q) → R",
        "P",
        "Q"
      ],
      "conclusion": "R",
      "expected_operations": 2,
      "description": "Conjunction + Modus Ponens",
      "solution": "Apply Conjunction to combine \"P\" and \"Q\" into \"P ∧ Q\", then Modus Ponens to get \"R\"."
    },
    {
      "premises": [
        "P ∨ (Q ∧ R)",
        "¬P"
      ],
      "conclusion": "(Q ∧ R)",
      "expected_operations": 1,
      "description": "Disjunctive Syllogism",
      "solution": "Apply Disjunctive Syllogism: from \"P ∨ (Q ∧ R)\" and \"¬P\", conclude \"(Q ∧ R)\"."
    },
    {
      "premises": [
        "(P ∧ Q) ∧ R"
      ],
      "conclusion": "P ∧ (Q ∧ R)",
      "expected_operations": 1,
      "description": "Associativity (AND)",
      "solution": "Apply Associativity to regroup the conjuncts: \"(P ∧ Q) ∧ R\" is equivalent to \"P ∧ (Q ∧ R)\"."
    },
    {
      "premises": [
        "(P ∨ Q) ∨ R"
      ],
      "conclusion": "P ∨ (Q ∨ R)",
      "expected_operations": 1,
      "description": "Associativity (OR)",
      "solution": "Apply Associativity to regroup the disjuncts: \"(P ∨ Q) ∨ R\" is equivalent to \"P ∨ (Q ∨ R)\"."
    },
    {
      "premises": [
        "P → Q"
      ],
      "conclusion": "(¬P ∨ Q)",
      "expected_operations": 1,
      "description": "Implication Conversion",
      "solution": "Apply Implication Conversion (IMP) to convert \"P → Q\" into its equivalent disjunctive form \"(¬P ∨ Q)\"."
    },
    {
      "premises": [
        "P → Q"
      ],
      "conclusion": "(¬Q → ¬P)",
      "expected_operations": 1,
      "description": "Contrapositive",
      "solution": "Apply Contrapositive transformation (CONV): \"P → Q\" is logically equivalent to \"(¬Q → ¬P)\"."
    },
    {
      "premises": [
        "P ∨ Q",
        "¬P ∨ R"
      ],
      "conclusion": "(Q ∨ R)",
      "expected_operations": 2,
      "description": "Resolution",
      "solution": "Apply Resolution: from \"P ∨ Q\" and \"¬P ∨ R\", resolve on P to get \"(Q ∨ R)\"."
    },
    {
      "premises": [
        "P ∨ (P ∧ Q)",
        "R"
      ],
      "conclusion": "(P ∧ R)",
      "expected_operations": 2,
      "description": "Absorption + Conjunction",
      "solution": "Apply Absorption to simplify \"P ∨ (P ∧ Q)\" to \"P\", then Conjunction with \"R\" to get \"(P ∧ R)\"."
    },
    {
      "premises": [
        "P ∧ (Q ∨ R)",
        "¬Q"
      ],
      "conclusion": "(P ∧ R)",
      "expected_operations": 2,
      "description": "Simplification + Disjunctive Syllogism + Conjunction",
      "solution": "Apply Simplification to extract \"P\" and \"Q ∨ R\", then Disjunctive Syllogism with \"¬Q\" to get \"R\", finally Conjunction to combine \"P\" and \"R\"."
    },
    {
      "premises": [
        "P ↔ Q",
        "P"
      ],
      "conclusion": "Q",
      "expected_operations": 2,
      "description": "Biconditional Elimination + Modus Ponens",
      "solution": "Apply Biconditional Elimination to extract \"P → Q\" from \"P ↔ Q\", then Modus Ponens with \"P\" to conclude \"Q\"."
    },
    {
      "premises": [
        "P ∨ Q",
        "P → R",
        "Q → R"
      ],
      "conclusion": "R",
      "expected_operations": 2,
      "description": "Proof by Cases",
      "solution": "Since we have P ∨ Q, we know either P or Q is true. If P is true, then R follows from P → R. If Q is true, then R follows from Q → R. Either way, R must be true. Apply Constructive Dilemma or case-by-case analysis."
    },
    {
      "premises": [
        "R ∧ (R ∨ S)",
        "T"
      ],
      "conclusion": "(R ∧ T)",
      "expected_operations": 2,
      "description": "Absorption + Conjunction",
      "solution": "Apply Absorption to simplify \"R ∧ (R ∨ S)\" to \"R\", then Conjunction with \"T\" to get \"R ∧ T\"."
    }
  ]
}